package com.example.companionapp;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.UUID;

public class MainActivity extends AppCompatActivity {
    private String deviceAddress = null;
    public static Handler handler;
    public static BluetoothSocket mmSocket;
    public static CreateConnectThread createConnectThread;
    public static ConnectedThread connectedThread;

    private final static int CONNECTION_STATUS = 1;
    private final static int MESSAGE_READ = 2;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        TextView bluetoothStatus = findViewById(R.id.textBlueToothStatus);
        Button buttonConnect = findViewById(R.id.buttonConnect);
        Button buttonDisconnect = findViewById(R.id.buttonDisconnect);
        TextView ledStatus = findViewById(R.id.textLedStatus);
        Button buttonOn = findViewById(R.id.buttonOn);
        Button buttonOff = findViewById(R.id.buttonOff);
        Button buttonBlink = findViewById(R.id.buttonBlink);

        buttonConnect.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, SelectDeviceActivity.class);
                startActivity(intent);
            }
        });

        //code for disconnect button
        buttonDisconnect.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                createConnectThread.cancel();
                bluetoothStatus.setText("Bluetooth is Disconnected");
            }
        });

        //Get Device Address INformation
        deviceAddress = getIntent().getStringExtra("deviceAddress");

        //if device is address is found
        if (deviceAddress != null){
            bluetoothStatus.setText("Connecting...");
            BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
            createConnectThread = new CreateConnectThread(bluetoothAdapter, deviceAddress);
            createConnectThread.start();
        }

        //hanlder object
        handler = new Handler(Looper.getMainLooper()){
            @Override
            public void handleMessage(Message msg){
                switch (msg.what){
                    case CONNECTION_STATUS:
                        switch (msg.arg1){
                            case 1:
                                bluetoothStatus.setText("Bluetooth Connectd");;
                                break;
                            case 11:
                                bluetoothStatus.setText("Connection Failed");
                                break;
                        }
                        break;
                    //if the message contains data from Arudino
                    case MESSAGE_READ:
                        String statusText = msg.obj.toString().replace("\n","");
                        ledStatus.setText(statusText);
                        break;
                }
            }
        };

        //turn on button
        buttonOn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String androidCmd = "w";
                connectedThread.write(androidCmd);
            }
        });
        //turn off button

        buttonOff.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String androidCmd = "s";
                connectedThread.write(androidCmd);

            }
        });

        //blink
        buttonBlink.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String androidCmd = "d";
                connectedThread.write(androidCmd);
            }
        });

    }
    /* Thread 1 */
    public static class CreateConnectThread extends Thread{
        public CreateConnectThread(BluetoothAdapter bluetoothAdapter, String address){
            BluetoothDevice bluetoothDevice = bluetoothAdapter.getRemoteDevice(address);
            BluetoothSocket tmp = null;
            UUID uuid = bluetoothDevice.getUuids()[0].getUuid();
            try{
                tmp = bluetoothDevice.createInsecureRfcommSocketToServiceRecord(uuid);
            } catch (IOException e){
                Log.e("Error Message", e.toString());
            }
            mmSocket = tmp;
        }

        public void run(){
            BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
            bluetoothAdapter.cancelDiscovery();
            try {
                mmSocket.connect();
                handler.obtainMessage(CONNECTION_STATUS,1,-1).sendToTarget();
            } catch (IOException connectException){
                try{
                    mmSocket.close();
                    handler.obtainMessage(CONNECTION_STATUS,-1,-1).sendToTarget();
                } catch (IOException closeException){}
                return;
            }

            connectedThread = new ConnectedThread(mmSocket);
            connectedThread.run();

        }

        public void cancel(){
            try{
                mmSocket.close();
            } catch (IOException e){}
        }

    }

    /* thread 2*/
    public static class ConnectedThread extends Thread{
        private final BluetoothSocket mmSocket;
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;

        public ConnectedThread(BluetoothSocket socket){
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;
            try{
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();

            } catch (IOException e){}
                mmInStream = tmpIn;
                mmOutStream = tmpOut;


        }

        public void run(){
            byte[] buffer = new byte[1024];
            int bytes = 0;
            while (true){
                try {
                    buffer[bytes] = (byte) mmInStream.read();
                    String arduinoMsg = null;
                    if (buffer[bytes] == '\n'){
                        arduinoMsg = new String(buffer,0,bytes);
                        handler.obtainMessage(MESSAGE_READ,arduinoMsg).sendToTarget();
                        bytes = 0;
                    } else {
                        bytes++;
                    }
                } catch (IOException e){
                    break;
                }
            }
        }

        public void write(String input){
            byte[] bytes = input.getBytes();
            try{
                mmOutStream.write(bytes);;
            } catch (IOException e){}
        }
    }

}
